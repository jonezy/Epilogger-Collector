'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.235
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="EpiloggerV1")>  _
Partial Public Class TweetsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertURL(instance As URL)
    End Sub
  Partial Private Sub UpdateURL(instance As URL)
    End Sub
  Partial Private Sub DeleteURL(instance As URL)
    End Sub
  Partial Private Sub InsertVenue(instance As Venue)
    End Sub
  Partial Private Sub UpdateVenue(instance As Venue)
    End Sub
  Partial Private Sub DeleteVenue(instance As Venue)
    End Sub
  Partial Private Sub InsertEpiloggerImage(instance As EpiloggerImage)
    End Sub
  Partial Private Sub UpdateEpiloggerImage(instance As EpiloggerImage)
    End Sub
  Partial Private Sub DeleteEpiloggerImage(instance As EpiloggerImage)
    End Sub
  Partial Private Sub InsertEpiloggerImageMetaData(instance As EpiloggerImageMetaData)
    End Sub
  Partial Private Sub UpdateEpiloggerImageMetaData(instance As EpiloggerImageMetaData)
    End Sub
  Partial Private Sub DeleteEpiloggerImageMetaData(instance As EpiloggerImageMetaData)
    End Sub
  Partial Private Sub InsertCheckIn(instance As CheckIn)
    End Sub
  Partial Private Sub UpdateCheckIn(instance As CheckIn)
    End Sub
  Partial Private Sub DeleteCheckIn(instance As CheckIn)
    End Sub
  Partial Private Sub InsertTweet(instance As Tweet)
    End Sub
  Partial Private Sub UpdateTweet(instance As Tweet)
    End Sub
  Partial Private Sub DeleteTweet(instance As Tweet)
    End Sub
  Partial Private Sub InsertEvent(instance As [Event])
    End Sub
  Partial Private Sub UpdateEvent(instance As [Event])
    End Sub
  Partial Private Sub DeleteEvent(instance As [Event])
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DataCollector.My.MySettings.Default.EpiloggerConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property URLs() As System.Data.Linq.Table(Of URL)
		Get
			Return Me.GetTable(Of URL)
		End Get
	End Property
	
	Public ReadOnly Property Venues() As System.Data.Linq.Table(Of Venue)
		Get
			Return Me.GetTable(Of Venue)
		End Get
	End Property
	
	Public ReadOnly Property EpiloggerImages() As System.Data.Linq.Table(Of EpiloggerImage)
		Get
			Return Me.GetTable(Of EpiloggerImage)
		End Get
	End Property
	
	Public ReadOnly Property EpiloggerImageMetaDatas() As System.Data.Linq.Table(Of EpiloggerImageMetaData)
		Get
			Return Me.GetTable(Of EpiloggerImageMetaData)
		End Get
	End Property
	
	Public ReadOnly Property CheckIns() As System.Data.Linq.Table(Of CheckIn)
		Get
			Return Me.GetTable(Of CheckIn)
		End Get
	End Property
	
	Public ReadOnly Property Tweets() As System.Data.Linq.Table(Of Tweet)
		Get
			Return Me.GetTable(Of Tweet)
		End Get
	End Property
	
	Public ReadOnly Property Events() As System.Data.Linq.Table(Of [Event])
		Get
			Return Me.GetTable(Of [Event])
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.URLs")>  _
Partial Public Class URL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _EventID As Integer
	
	Private _TweetID As Long
	
	Private _ShortURL As String
	
	Private _URL As String
	
	Private _Type As String
	
	Private _DeleteVoteCount As System.Nullable(Of Integer)
	
	Private _Deleted As System.Nullable(Of Boolean)
	
	Private _Tweet As EntityRef(Of Tweet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnTweetIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTweetIDChanged()
    End Sub
    Partial Private Sub OnShortURLChanging(value As String)
    End Sub
    Partial Private Sub OnShortURLChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnDeleteVoteCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDeleteVoteCountChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tweet = CType(Nothing, EntityRef(Of Tweet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int NOT NULL")>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TweetID", DbType:="BigInt NOT NULL")>  _
	Public Property TweetID() As Long
		Get
			Return Me._TweetID
		End Get
		Set
			If ((Me._TweetID = value)  _
						= false) Then
				If Me._Tweet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTweetIDChanging(value)
				Me.SendPropertyChanging
				Me._TweetID = value
				Me.SendPropertyChanged("TweetID")
				Me.OnTweetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShortURL", DbType:="NVarChar(1000)")>  _
	Public Property ShortURL() As String
		Get
			Return Me._ShortURL
		End Get
		Set
			If (String.Equals(Me._ShortURL, value) = false) Then
				Me.OnShortURLChanging(value)
				Me.SendPropertyChanging
				Me._ShortURL = value
				Me.SendPropertyChanged("ShortURL")
				Me.OnShortURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(1000)")>  _
	Public Property URL() As String
		Get
			Return Me._URL
		End Get
		Set
			If (String.Equals(Me._URL, value) = false) Then
				Me.OnURLChanging(value)
				Me.SendPropertyChanging
				Me._URL = value
				Me.SendPropertyChanged("URL")
				Me.OnURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(500)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeleteVoteCount", DbType:="Int")>  _
	Public Property DeleteVoteCount() As System.Nullable(Of Integer)
		Get
			Return Me._DeleteVoteCount
		End Get
		Set
			If (Me._DeleteVoteCount.Equals(value) = false) Then
				Me.OnDeleteVoteCountChanging(value)
				Me.SendPropertyChanging
				Me._DeleteVoteCount = value
				Me.SendPropertyChanged("DeleteVoteCount")
				Me.OnDeleteVoteCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit")>  _
	Public Property Deleted() As System.Nullable(Of Boolean)
		Get
			Return Me._Deleted
		End Get
		Set
			If (Me._Deleted.Equals(value) = false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tweet_URL", Storage:="_Tweet", ThisKey:="TweetID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Tweet() As Tweet
		Get
			Return Me._Tweet.Entity
		End Get
		Set
			Dim previousValue As Tweet = Me._Tweet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tweet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tweet.Entity = Nothing
					previousValue.URLs.Remove(Me)
				End If
				Me._Tweet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.URLs.Add(Me)
					Me._TweetID = value.ID
				Else
					Me._TweetID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Tweet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Venues")>  _
Partial Public Class Venue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VenueID As Long
	
	Private _Address As String
	
	Private _City As String
	
	Private _CrossStreet As String
	
	Private _Geolat As System.Nullable(Of Double)
	
	Private _Geolong As System.Nullable(Of Double)
	
	Private _Name As String
	
	Private _Phone As String
	
	Private _State As String
	
	Private _Zip As String
	
	Private _Events As EntitySet(Of [Event])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVenueIDChanging(value As Long)
    End Sub
    Partial Private Sub OnVenueIDChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnCrossStreetChanging(value As String)
    End Sub
    Partial Private Sub OnCrossStreetChanged()
    End Sub
    Partial Private Sub OnGeolatChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnGeolatChanged()
    End Sub
    Partial Private Sub OnGeolongChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnGeolongChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Events = New EntitySet(Of [Event])(AddressOf Me.attach_Events, AddressOf Me.detach_Events)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VenueID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property VenueID() As Long
		Get
			Return Me._VenueID
		End Get
		Set
			If ((Me._VenueID = value)  _
						= false) Then
				Me.OnVenueIDChanging(value)
				Me.SendPropertyChanging
				Me._VenueID = value
				Me.SendPropertyChanged("VenueID")
				Me.OnVenueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(1000)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CrossStreet", DbType:="NVarChar(1000)")>  _
	Public Property CrossStreet() As String
		Get
			Return Me._CrossStreet
		End Get
		Set
			If (String.Equals(Me._CrossStreet, value) = false) Then
				Me.OnCrossStreetChanging(value)
				Me.SendPropertyChanging
				Me._CrossStreet = value
				Me.SendPropertyChanged("CrossStreet")
				Me.OnCrossStreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Geolat", DbType:="Float")>  _
	Public Property Geolat() As System.Nullable(Of Double)
		Get
			Return Me._Geolat
		End Get
		Set
			If (Me._Geolat.Equals(value) = false) Then
				Me.OnGeolatChanging(value)
				Me.SendPropertyChanging
				Me._Geolat = value
				Me.SendPropertyChanged("Geolat")
				Me.OnGeolatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Geolong", DbType:="Float")>  _
	Public Property Geolong() As System.Nullable(Of Double)
		Get
			Return Me._Geolong
		End Get
		Set
			If (Me._Geolong.Equals(value) = false) Then
				Me.OnGeolongChanging(value)
				Me.SendPropertyChanging
				Me._Geolong = value
				Me.SendPropertyChanged("Geolong")
				Me.OnGeolongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(500)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(50)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(20)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Venue_Event", Storage:="_Events", ThisKey:="VenueID", OtherKey:="VenueID")>  _
	Public Property Events() As EntitySet(Of [Event])
		Get
			Return Me._Events
		End Get
		Set
			Me._Events.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Venue = Me
	End Sub
	
	Private Sub detach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Venue = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Images")>  _
Partial Public Class EpiloggerImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _EventID As Integer
	
	Private _AzureContainerPrefix As String
	
	Private _Fullsize As String
	
	Private _Thumb As String
	
	Private _OriginalImageLink As String
	
	Private _DateTime As Date
	
	Private _DeleteVoteCount As System.Nullable(Of Integer)
	
	Private _Deleted As Boolean
	
	Private _ImageMetaDatas As EntitySet(Of EpiloggerImageMetaData)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnAzureContainerPrefixChanging(value As String)
    End Sub
    Partial Private Sub OnAzureContainerPrefixChanged()
    End Sub
    Partial Private Sub OnFullsizeChanging(value As String)
    End Sub
    Partial Private Sub OnFullsizeChanged()
    End Sub
    Partial Private Sub OnThumbChanging(value As String)
    End Sub
    Partial Private Sub OnThumbChanged()
    End Sub
    Partial Private Sub OnOriginalImageLinkChanging(value As String)
    End Sub
    Partial Private Sub OnOriginalImageLinkChanged()
    End Sub
    Partial Private Sub OnDateTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnDateTimeChanged()
    End Sub
    Partial Private Sub OnDeleteVoteCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDeleteVoteCountChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ImageMetaDatas = New EntitySet(Of EpiloggerImageMetaData)(AddressOf Me.attach_ImageMetaDatas, AddressOf Me.detach_ImageMetaDatas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int NOT NULL")>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AzureContainerPrefix", DbType:="NVarChar(50)")>  _
	Public Property AzureContainerPrefix() As String
		Get
			Return Me._AzureContainerPrefix
		End Get
		Set
			If (String.Equals(Me._AzureContainerPrefix, value) = false) Then
				Me.OnAzureContainerPrefixChanging(value)
				Me.SendPropertyChanging
				Me._AzureContainerPrefix = value
				Me.SendPropertyChanged("AzureContainerPrefix")
				Me.OnAzureContainerPrefixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fullsize", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Fullsize() As String
		Get
			Return Me._Fullsize
		End Get
		Set
			If (String.Equals(Me._Fullsize, value) = false) Then
				Me.OnFullsizeChanging(value)
				Me.SendPropertyChanging
				Me._Fullsize = value
				Me.SendPropertyChanged("Fullsize")
				Me.OnFullsizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Thumb", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Thumb() As String
		Get
			Return Me._Thumb
		End Get
		Set
			If (String.Equals(Me._Thumb, value) = false) Then
				Me.OnThumbChanging(value)
				Me.SendPropertyChanging
				Me._Thumb = value
				Me.SendPropertyChanged("Thumb")
				Me.OnThumbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OriginalImageLink", DbType:="NVarChar(1000)")>  _
	Public Property OriginalImageLink() As String
		Get
			Return Me._OriginalImageLink
		End Get
		Set
			If (String.Equals(Me._OriginalImageLink, value) = false) Then
				Me.OnOriginalImageLinkChanging(value)
				Me.SendPropertyChanging
				Me._OriginalImageLink = value
				Me.SendPropertyChanged("OriginalImageLink")
				Me.OnOriginalImageLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTime", DbType:="DateTime NOT NULL")>  _
	Public Property DateTime() As Date
		Get
			Return Me._DateTime
		End Get
		Set
			If ((Me._DateTime = value)  _
						= false) Then
				Me.OnDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._DateTime = value
				Me.SendPropertyChanged("DateTime")
				Me.OnDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeleteVoteCount", DbType:="Int")>  _
	Public Property DeleteVoteCount() As System.Nullable(Of Integer)
		Get
			Return Me._DeleteVoteCount
		End Get
		Set
			If (Me._DeleteVoteCount.Equals(value) = false) Then
				Me.OnDeleteVoteCountChanging(value)
				Me.SendPropertyChanging
				Me._DeleteVoteCount = value
				Me.SendPropertyChanged("DeleteVoteCount")
				Me.OnDeleteVoteCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit NOT NULL")>  _
	Public Property Deleted() As Boolean
		Get
			Return Me._Deleted
		End Get
		Set
			If ((Me._Deleted = value)  _
						= false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EpiloggerImage_EpiloggerImageMetaData", Storage:="_ImageMetaDatas", ThisKey:="ID", OtherKey:="ImageID")>  _
	Public Property EpiloggerImageMetaDatas() As EntitySet(Of EpiloggerImageMetaData)
		Get
			Return Me._ImageMetaDatas
		End Get
		Set
			Me._ImageMetaDatas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ImageMetaDatas(ByVal entity As EpiloggerImageMetaData)
		Me.SendPropertyChanging
		entity.EpiloggerImage = Me
	End Sub
	
	Private Sub detach_ImageMetaDatas(ByVal entity As EpiloggerImageMetaData)
		Me.SendPropertyChanging
		entity.EpiloggerImage = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImageMetaData")>  _
Partial Public Class EpiloggerImageMetaData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ImageID As Integer
	
	Private _EventID As Integer
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _ImageSource As String
	
	Private _TwitterID As System.Nullable(Of Long)
	
	Private _TwitterName As String
	
	Private _EpiloggerImage As EntityRef(Of EpiloggerImage)
	
	Private _Event As EntityRef(Of [Event])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnImageSourceChanging(value As String)
    End Sub
    Partial Private Sub OnImageSourceChanged()
    End Sub
    Partial Private Sub OnTwitterIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTwitterIDChanged()
    End Sub
    Partial Private Sub OnTwitterNameChanging(value As String)
    End Sub
    Partial Private Sub OnTwitterNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EpiloggerImage = CType(Nothing, EntityRef(Of EpiloggerImage))
		Me._Event = CType(Nothing, EntityRef(Of [Event]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", DbType:="Int NOT NULL")>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				If Me._EpiloggerImage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int NOT NULL")>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				If Me._Event.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageSource", DbType:="NVarChar(100)")>  _
	Public Property ImageSource() As String
		Get
			Return Me._ImageSource
		End Get
		Set
			If (String.Equals(Me._ImageSource, value) = false) Then
				Me.OnImageSourceChanging(value)
				Me.SendPropertyChanging
				Me._ImageSource = value
				Me.SendPropertyChanged("ImageSource")
				Me.OnImageSourceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TwitterID", DbType:="BigInt")>  _
	Public Property TwitterID() As System.Nullable(Of Long)
		Get
			Return Me._TwitterID
		End Get
		Set
			If (Me._TwitterID.Equals(value) = false) Then
				Me.OnTwitterIDChanging(value)
				Me.SendPropertyChanging
				Me._TwitterID = value
				Me.SendPropertyChanged("TwitterID")
				Me.OnTwitterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TwitterName", DbType:="NVarChar(100)")>  _
	Public Property TwitterName() As String
		Get
			Return Me._TwitterName
		End Get
		Set
			If (String.Equals(Me._TwitterName, value) = false) Then
				Me.OnTwitterNameChanging(value)
				Me.SendPropertyChanging
				Me._TwitterName = value
				Me.SendPropertyChanged("TwitterName")
				Me.OnTwitterNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EpiloggerImage_EpiloggerImageMetaData", Storage:="_EpiloggerImage", ThisKey:="ImageID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EpiloggerImage() As EpiloggerImage
		Get
			Return Me._EpiloggerImage.Entity
		End Get
		Set
			Dim previousValue As EpiloggerImage = Me._EpiloggerImage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EpiloggerImage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EpiloggerImage.Entity = Nothing
					previousValue.EpiloggerImageMetaDatas.Remove(Me)
				End If
				Me._EpiloggerImage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EpiloggerImageMetaDatas.Add(Me)
					Me._ImageID = value.ID
				Else
					Me._ImageID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EpiloggerImage")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_EpiloggerImageMetaData", Storage:="_Event", ThisKey:="EventID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property [Event]() As [Event]
		Get
			Return Me._Event.Entity
		End Get
		Set
			Dim previousValue As [Event] = Me._Event.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Event.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Event.Entity = Nothing
					previousValue.EpiloggerImageMetaDatas.Remove(Me)
				End If
				Me._Event.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EpiloggerImageMetaDatas.Add(Me)
					Me._EventID = value.ID
				Else
					Me._EventID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Event]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CheckIns")>  _
Partial Public Class CheckIn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _EventID As Integer
	
	Private _TweetID As System.Nullable(Of Long)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _CheckInDateTime As Date
	
	Private _FourSquareCheckInURL As String
	
	Private _Event As EntityRef(Of [Event])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnTweetIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTweetIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCheckInDateTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnCheckInDateTimeChanged()
    End Sub
    Partial Private Sub OnFourSquareCheckInURLChanging(value As String)
    End Sub
    Partial Private Sub OnFourSquareCheckInURLChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Event = CType(Nothing, EntityRef(Of [Event]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int NOT NULL")>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				If Me._Event.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TweetID", DbType:="BigInt")>  _
	Public Property TweetID() As System.Nullable(Of Long)
		Get
			Return Me._TweetID
		End Get
		Set
			If (Me._TweetID.Equals(value) = false) Then
				Me.OnTweetIDChanging(value)
				Me.SendPropertyChanging
				Me._TweetID = value
				Me.SendPropertyChanged("TweetID")
				Me.OnTweetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CheckInDateTime", DbType:="DateTime NOT NULL")>  _
	Public Property CheckInDateTime() As Date
		Get
			Return Me._CheckInDateTime
		End Get
		Set
			If ((Me._CheckInDateTime = value)  _
						= false) Then
				Me.OnCheckInDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CheckInDateTime = value
				Me.SendPropertyChanged("CheckInDateTime")
				Me.OnCheckInDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FourSquareCheckInURL", DbType:="NVarChar(255)")>  _
	Public Property FourSquareCheckInURL() As String
		Get
			Return Me._FourSquareCheckInURL
		End Get
		Set
			If (String.Equals(Me._FourSquareCheckInURL, value) = false) Then
				Me.OnFourSquareCheckInURLChanging(value)
				Me.SendPropertyChanging
				Me._FourSquareCheckInURL = value
				Me.SendPropertyChanged("FourSquareCheckInURL")
				Me.OnFourSquareCheckInURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_CheckIn", Storage:="_Event", ThisKey:="EventID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property [Event]() As [Event]
		Get
			Return Me._Event.Entity
		End Get
		Set
			Dim previousValue As [Event] = Me._Event.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Event.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Event.Entity = Nothing
					previousValue.CheckIns.Remove(Me)
				End If
				Me._Event.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CheckIns.Add(Me)
					Me._EventID = value.ID
				Else
					Me._EventID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Event]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tweets")>  _
Partial Public Class Tweet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _TwitterID As Long
	
	Private _EventID As System.Nullable(Of Integer)
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _URLs As EntitySet(Of URL)
	
	Private _Event As EntityRef(Of [Event])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTwitterIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTwitterIDChanged()
    End Sub
    Partial Private Sub OnEventIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._URLs = New EntitySet(Of URL)(AddressOf Me.attach_URLs, AddressOf Me.detach_URLs)
		Me._Event = CType(Nothing, EntityRef(Of [Event]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TwitterID", DbType:="BigInt NOT NULL")>  _
	Public Property TwitterID() As Long
		Get
			Return Me._TwitterID
		End Get
		Set
			If ((Me._TwitterID = value)  _
						= false) Then
				Me.OnTwitterIDChanging(value)
				Me.SendPropertyChanging
				Me._TwitterID = value
				Me.SendPropertyChanged("TwitterID")
				Me.OnTwitterIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", DbType:="Int")>  _
	Public Property EventID() As System.Nullable(Of Integer)
		Get
			Return Me._EventID
		End Get
		Set
			If (Me._EventID.Equals(value) = false) Then
				If Me._Event.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tweet_URL", Storage:="_URLs", ThisKey:="ID", OtherKey:="TweetID")>  _
	Public Property URLs() As EntitySet(Of URL)
		Get
			Return Me._URLs
		End Get
		Set
			Me._URLs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_Tweet", Storage:="_Event", ThisKey:="EventID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property [Event]() As [Event]
		Get
			Return Me._Event.Entity
		End Get
		Set
			Dim previousValue As [Event] = Me._Event.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Event.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Event.Entity = Nothing
					previousValue.Tweets.Remove(Me)
				End If
				Me._Event.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tweets.Add(Me)
					Me._EventID = value.ID
				Else
					Me._EventID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("[Event]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_URLs(ByVal entity As URL)
		Me.SendPropertyChanging
		entity.Tweet = Me
	End Sub
	
	Private Sub detach_URLs(ByVal entity As URL)
		Me.SendPropertyChanging
		entity.Tweet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Events")>  _
Partial Public Class [Event]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _Name As String
	
	Private _SubTitle As String
	
	Private _Description As String
	
	Private _CategoryID As Integer
	
	Private _WebsiteURL As String
	
	Private _Cost As String
	
	Private _StartDateTime As System.Nullable(Of Date)
	
	Private _EndDateTime As System.Nullable(Of Date)
	
	Private _CollectionStartDateTime As System.Nullable(Of Date)
	
	Private _CollectionEndDateTime As System.Nullable(Of Date)
	
	Private _TimeZoneOffset As System.Nullable(Of Integer)
	
	Private _VenueID As System.Nullable(Of Long)
	
	Private _SearchTerms As String
	
	Private _NumberOfTweets As Long
	
	Private _IsPrivate As System.Nullable(Of Boolean)
	
	Private _IsAdult As System.Nullable(Of Boolean)
	
	Private _CollectionMode As Integer
	
	Private _EventStatus As String
	
	Private _LastTweetID As Long
	
	Private _IsActive As Boolean
	
	Private _EpiloggerImageMetaDatas As EntitySet(Of EpiloggerImageMetaData)
	
	Private _CheckIns As EntitySet(Of CheckIn)
	
	Private _Tweets As EntitySet(Of Tweet)
	
	Private _Venue As EntityRef(Of Venue)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnSubTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSubTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCategoryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIDChanged()
    End Sub
    Partial Private Sub OnWebsiteURLChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteURLChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As String)
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnStartDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateTimeChanged()
    End Sub
    Partial Private Sub OnEndDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateTimeChanged()
    End Sub
    Partial Private Sub OnCollectionStartDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCollectionStartDateTimeChanged()
    End Sub
    Partial Private Sub OnCollectionEndDateTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCollectionEndDateTimeChanged()
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTimeZoneOffsetChanged()
    End Sub
    Partial Private Sub OnVenueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVenueIDChanged()
    End Sub
    Partial Private Sub OnSearchTermsChanging(value As String)
    End Sub
    Partial Private Sub OnSearchTermsChanged()
    End Sub
    Partial Private Sub OnNumberOfTweetsChanging(value As Long)
    End Sub
    Partial Private Sub OnNumberOfTweetsChanged()
    End Sub
    Partial Private Sub OnIsPrivateChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPrivateChanged()
    End Sub
    Partial Private Sub OnIsAdultChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAdultChanged()
    End Sub
    Partial Private Sub OnCollectionModeChanging(value As Integer)
    End Sub
    Partial Private Sub OnCollectionModeChanged()
    End Sub
    Partial Private Sub OnEventStatusChanging(value As String)
    End Sub
    Partial Private Sub OnEventStatusChanged()
    End Sub
    Partial Private Sub OnLastTweetIDChanging(value As Long)
    End Sub
    Partial Private Sub OnLastTweetIDChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EpiloggerImageMetaDatas = New EntitySet(Of EpiloggerImageMetaData)(AddressOf Me.attach_EpiloggerImageMetaDatas, AddressOf Me.detach_EpiloggerImageMetaDatas)
		Me._CheckIns = New EntitySet(Of CheckIn)(AddressOf Me.attach_CheckIns, AddressOf Me.detach_CheckIns)
		Me._Tweets = New EntitySet(Of Tweet)(AddressOf Me.attach_Tweets, AddressOf Me.detach_Tweets)
		Me._Venue = CType(Nothing, EntityRef(Of Venue))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTitle", DbType:="NVarChar(100)")>  _
	Public Property SubTitle() As String
		Get
			Return Me._SubTitle
		End Get
		Set
			If (String.Equals(Me._SubTitle, value) = false) Then
				Me.OnSubTitleChanging(value)
				Me.SendPropertyChanging
				Me._SubTitle = value
				Me.SendPropertyChanged("SubTitle")
				Me.OnSubTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")>  _
	Public Property CategoryID() As Integer
		Get
			Return Me._CategoryID
		End Get
		Set
			If ((Me._CategoryID = value)  _
						= false) Then
				Me.OnCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CategoryID = value
				Me.SendPropertyChanged("CategoryID")
				Me.OnCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebsiteURL", DbType:="NVarChar(500)")>  _
	Public Property WebsiteURL() As String
		Get
			Return Me._WebsiteURL
		End Get
		Set
			If (String.Equals(Me._WebsiteURL, value) = false) Then
				Me.OnWebsiteURLChanging(value)
				Me.SendPropertyChanging
				Me._WebsiteURL = value
				Me.SendPropertyChanged("WebsiteURL")
				Me.OnWebsiteURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cost", DbType:="NVarChar(500)")>  _
	Public Property Cost() As String
		Get
			Return Me._Cost
		End Get
		Set
			If (String.Equals(Me._Cost, value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDateTime", DbType:="DateTime")>  _
	Public Property StartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._StartDateTime
		End Get
		Set
			If (Me._StartDateTime.Equals(value) = false) Then
				Me.OnStartDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartDateTime = value
				Me.SendPropertyChanged("StartDateTime")
				Me.OnStartDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDateTime", DbType:="DateTime")>  _
	Public Property EndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._EndDateTime
		End Get
		Set
			If (Me._EndDateTime.Equals(value) = false) Then
				Me.OnEndDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndDateTime = value
				Me.SendPropertyChanged("EndDateTime")
				Me.OnEndDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionStartDateTime", DbType:="DateTime")>  _
	Public Property CollectionStartDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CollectionStartDateTime
		End Get
		Set
			If (Me._CollectionStartDateTime.Equals(value) = false) Then
				Me.OnCollectionStartDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CollectionStartDateTime = value
				Me.SendPropertyChanged("CollectionStartDateTime")
				Me.OnCollectionStartDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionEndDateTime", DbType:="DateTime")>  _
	Public Property CollectionEndDateTime() As System.Nullable(Of Date)
		Get
			Return Me._CollectionEndDateTime
		End Get
		Set
			If (Me._CollectionEndDateTime.Equals(value) = false) Then
				Me.OnCollectionEndDateTimeChanging(value)
				Me.SendPropertyChanging
				Me._CollectionEndDateTime = value
				Me.SendPropertyChanged("CollectionEndDateTime")
				Me.OnCollectionEndDateTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeZoneOffset", DbType:="Int")>  _
	Public Property TimeZoneOffset() As System.Nullable(Of Integer)
		Get
			Return Me._TimeZoneOffset
		End Get
		Set
			If (Me._TimeZoneOffset.Equals(value) = false) Then
				Me.OnTimeZoneOffsetChanging(value)
				Me.SendPropertyChanging
				Me._TimeZoneOffset = value
				Me.SendPropertyChanged("TimeZoneOffset")
				Me.OnTimeZoneOffsetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VenueID", DbType:="BigInt")>  _
	Public Property VenueID() As System.Nullable(Of Long)
		Get
			Return Me._VenueID
		End Get
		Set
			If (Me._VenueID.Equals(value) = false) Then
				If Me._Venue.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVenueIDChanging(value)
				Me.SendPropertyChanging
				Me._VenueID = value
				Me.SendPropertyChanged("VenueID")
				Me.OnVenueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SearchTerms", DbType:="NVarChar(255)")>  _
	Public Property SearchTerms() As String
		Get
			Return Me._SearchTerms
		End Get
		Set
			If (String.Equals(Me._SearchTerms, value) = false) Then
				Me.OnSearchTermsChanging(value)
				Me.SendPropertyChanging
				Me._SearchTerms = value
				Me.SendPropertyChanged("SearchTerms")
				Me.OnSearchTermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfTweets", DbType:="BigInt NOT NULL")>  _
	Public Property NumberOfTweets() As Long
		Get
			Return Me._NumberOfTweets
		End Get
		Set
			If ((Me._NumberOfTweets = value)  _
						= false) Then
				Me.OnNumberOfTweetsChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfTweets = value
				Me.SendPropertyChanged("NumberOfTweets")
				Me.OnNumberOfTweetsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPrivate", DbType:="Bit")>  _
	Public Property IsPrivate() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPrivate
		End Get
		Set
			If (Me._IsPrivate.Equals(value) = false) Then
				Me.OnIsPrivateChanging(value)
				Me.SendPropertyChanging
				Me._IsPrivate = value
				Me.SendPropertyChanged("IsPrivate")
				Me.OnIsPrivateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAdult", DbType:="Bit")>  _
	Public Property IsAdult() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAdult
		End Get
		Set
			If (Me._IsAdult.Equals(value) = false) Then
				Me.OnIsAdultChanging(value)
				Me.SendPropertyChanging
				Me._IsAdult = value
				Me.SendPropertyChanged("IsAdult")
				Me.OnIsAdultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionMode", DbType:="Int NOT NULL")>  _
	Public Property CollectionMode() As Integer
		Get
			Return Me._CollectionMode
		End Get
		Set
			If ((Me._CollectionMode = value)  _
						= false) Then
				Me.OnCollectionModeChanging(value)
				Me.SendPropertyChanging
				Me._CollectionMode = value
				Me.SendPropertyChanged("CollectionMode")
				Me.OnCollectionModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventStatus", DbType:="NVarChar(50)")>  _
	Public Property EventStatus() As String
		Get
			Return Me._EventStatus
		End Get
		Set
			If (String.Equals(Me._EventStatus, value) = false) Then
				Me.OnEventStatusChanging(value)
				Me.SendPropertyChanging
				Me._EventStatus = value
				Me.SendPropertyChanged("EventStatus")
				Me.OnEventStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastTweetID", DbType:="BigInt NOT NULL")>  _
	Public Property LastTweetID() As Long
		Get
			Return Me._LastTweetID
		End Get
		Set
			If ((Me._LastTweetID = value)  _
						= false) Then
				Me.OnLastTweetIDChanging(value)
				Me.SendPropertyChanging
				Me._LastTweetID = value
				Me.SendPropertyChanged("LastTweetID")
				Me.OnLastTweetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_EpiloggerImageMetaData", Storage:="_EpiloggerImageMetaDatas", ThisKey:="ID", OtherKey:="EventID")>  _
	Public Property EpiloggerImageMetaDatas() As EntitySet(Of EpiloggerImageMetaData)
		Get
			Return Me._EpiloggerImageMetaDatas
		End Get
		Set
			Me._EpiloggerImageMetaDatas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_CheckIn", Storage:="_CheckIns", ThisKey:="ID", OtherKey:="EventID")>  _
	Public Property CheckIns() As EntitySet(Of CheckIn)
		Get
			Return Me._CheckIns
		End Get
		Set
			Me._CheckIns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Event_Tweet", Storage:="_Tweets", ThisKey:="ID", OtherKey:="EventID")>  _
	Public Property Tweets() As EntitySet(Of Tweet)
		Get
			Return Me._Tweets
		End Get
		Set
			Me._Tweets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Venue_Event", Storage:="_Venue", ThisKey:="VenueID", OtherKey:="VenueID", IsForeignKey:=true)>  _
	Public Property Venue() As Venue
		Get
			Return Me._Venue.Entity
		End Get
		Set
			Dim previousValue As Venue = Me._Venue.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Venue.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Venue.Entity = Nothing
					previousValue.Events.Remove(Me)
				End If
				Me._Venue.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Events.Add(Me)
					Me._VenueID = value.VenueID
				Else
					Me._VenueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Venue")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EpiloggerImageMetaDatas(ByVal entity As EpiloggerImageMetaData)
		Me.SendPropertyChanging
		entity.[Event] = Me
	End Sub
	
	Private Sub detach_EpiloggerImageMetaDatas(ByVal entity As EpiloggerImageMetaData)
		Me.SendPropertyChanging
		entity.[Event] = Nothing
	End Sub
	
	Private Sub attach_CheckIns(ByVal entity As CheckIn)
		Me.SendPropertyChanging
		entity.[Event] = Me
	End Sub
	
	Private Sub detach_CheckIns(ByVal entity As CheckIn)
		Me.SendPropertyChanging
		entity.[Event] = Nothing
	End Sub
	
	Private Sub attach_Tweets(ByVal entity As Tweet)
		Me.SendPropertyChanging
		entity.[Event] = Me
	End Sub
	
	Private Sub detach_Tweets(ByVal entity As Tweet)
		Me.SendPropertyChanging
		entity.[Event] = Nothing
	End Sub
End Class
